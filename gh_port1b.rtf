{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red60\green60\blue60;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\sa100

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 As per the documentation I\'92ve found ({\field{\*\fldinst{HYPERLINK "http://cyreath.blogspot.com/2014/05/ruby-w-vs-w-secrets-revealed.html),%22%25w"}}{\fldrslt http://cyreath.blogspot.com/2014/05/ruby-w-vs-w-secrets-revealed.html),\'93%w}}\'94 & %W" are used preceding an array to specify an array of strings, without quotes and separated by spaces instead of commas.\
The same document specifies the following:\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1) %w: if a variable (denoted as #\{varname\}) within an array is defined as a string using single quotes, and the array is preceded with \'93%w\'94, the variable will not be interpolated to its actual value, so with a puts, the array denotation of \'93#\{varname\}\'94 will be printed literally. If a variable is defined as a string using double quotes, puts will print the actual value of the variable.\
2) %W: if a variable (defined as a string) is denoted as \'93#\{varname\}\'94 within an array preceded by \'93%W\'94, the actual value of the variable will be printed, regardless of whether it was defined using single or double quotes.\
Though I have not found documentation of how %w vs. %W handle variables defined as numbers, I\'92m hypothesizing, from the result of running\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 a = 1\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 puts %w[#\{a\} b c d]\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 puts %W[#\{a\} b c d]\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 that in the same way that %w will not interpolate the value of a string variable defined by single quotes, it also will not interpolate the value of a variable defined as a number.\
so my results from running\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 a = 1\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 %w[#\{a\} b c d]\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 %W[#\{a\} b c d]\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 are as follows:\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 a puts for the %w array displays \'93[\'94#\{a\}\'93, "b\'94, \'93c\'94, \'93d\'94], and\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 a puts for the %W array displays \'93["1\'94, \'93b\'94, \'93c\'94, \'93d\'94]\
}